how to create Java threads?
--------------------------
1) by extending Thread:
    import java.io.*;
    import java.util.*;

    public class ThreadTest1 extends Thread {
      // Initiated run method for Thread
      public void run() {
        System.out.println("Thread Started Running...");
      }

      public static void main(String[] args) {
        ThreadTest1 t1 = new ThreadTest1();
        // Invoking Thread using start() method
        t1.start();
      }
    }

2) by implementing Runnable:
    import java.io.*;
    import java.util.*;

    public class ThreadTest2 implements Runnable {
      // method to start Thread
      public void run() {
        System.out.println("Thread is Running Successfully");
      }

      public static void main(String[] args) {
        ThreadTest2 g1 = new ThreadTest2(); // initializing Thread Object
        Thread t1 = new Thread(g1);
        t1.start();
      }
    }

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

how parallel running works:
--------------------------
main -
     |
     |
     |
     - t1 and t2 created
     |
     |
     |
     - t1.sort()
     |
     |
     |
-----------
|    |    |
t2   |    t1
|   main  |
|    |    |
|    |    |
V    V    V

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

thread priority:
---------------
whenever we create a thread, it always has some priority assigned to it
the priority can either be assigned by the JVM while creating the thread or explicitly by the programmer

Java provides three constants for thread priorities:
1) public static int NORM_PRIORITY
2) public static int MIN_PRIORITY (by default)
3) public static int MAX_PRIORITY

functions used when working with priorities:
-------------------------------------------
1) public final int getPriority():
   java.lang.Thread.getPriority() method
   returns the priority of the given thread

2) public final void setPriority(int newPriority):
   java.lang.Thread.setPriority() method
   changes the priority of thread to the value newPriority
   throws IllegalArgumentException if value of parameter newPriority goes beyond minimum(1) and maximum(10) limit

higher priority thread finishes and then only lower priority thread starts

<thread>.setPriority(<integer>);
<thread>.getPriority();

currently executing thread: Thread.currentThread().getName();
main thread priority: Thread.currentThread().getPriority();
                      Thread.currentThread().setPriority(<integer>);

random choosing if all threads have same priority order

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

Java main thread:
----------------
when a Java program starts up, one thread begins running immediately
usually called the main thread of our program
because it is the one that is executed when our program begins

properties:
----------
thread from which other child threads will be spawned
often, it must be the last thread to finish execution because it performs various shutdown actions

zombie threads: threads who still exist in memory but are not associated with any parent cause parent thread: deleted
                main thread is killed, child thread not killed

Main Thread (Started by JVM for each program)
  Spawns Child Thread A
    Child Thread A spawns Child Thread C
  Spawns Child Thread B
JVM also starts Other Daemon Threads (e.g., Garbage Collector).

                                  JVM
                        start      |      start
                  -----------------------------------
                  |                                 |
                  |                                 |
                  V                                 V
            main thread                    other daemon threads
                  |                      (ex.: garbage collector)
        ---------------------
        |                   |
  start |                   | start
        |                   |
        V                   V
  child thread A      child thread B
        |
        |
        |
        V
  child thread C

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

role of start() function:
------------------------
when function called, these take place:
1) arguments are evaluated
2) new stack frame is pushed into the call stack
3) parameters are initialized
4) method body is executed

after execution:
1) value is returned
2) current stack frame is popped from the call stack

purpose of start():
------------------
start() makes the ground for run()
start() method creates a separate call stack for the thread
a new call stack is created, and then run() method is invoked by JVM

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

            Thread.start()                         Thread.run()
               start()                                run()
1) Creates a new thread, and the         1) No new thread is created, and
   run() method is executed on the          the run() method is executed on
   newly created thread.	                  the calling thread itself.
2) Canâ€™t be invoked more than once; 	   2) Multiple invocations are
   otherwise, throws                        possible.
   java.lang.IllegalStateException.
3) Defined in java.lang.Thread class.	   3) Defined in java.lang.Runnable
   Have to implement because it is an       interface and must be overridden
   abstract function                        in the implementing class.
                                         4) will not even let it know that
                                            it is a thread, even though
                                            Thread class is extended
                                         5) run() is legal, not valid

only if you have an explicit exception can you use an exception handler, managed by JVM

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

garbage collector:
for all t in pool
  if (tEntry == 0)
    t --> null

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

producer consumer problem: in general, rate of production < rate of consumption (ideally)

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*
