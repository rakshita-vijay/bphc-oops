serial UID:
----------
unique ID of serial object

any object/class made serializable is automatically assigned a unique, randomly-generated UID by JVM

the serialVersionUID is something like version number; in short, if we save an object with 1L, we need to provide the same 1L to read the object, else hits an incompatible error.

For example, we saved an object with serialVersionUID = 1L into a file name person.obj. Later we add or delete some fields from the object, and update serialVersionUID to 2L. Now, read the person.obj file and try to convert it back to the modified object; since both serialVersionUID is different, we will hit the invalidClassException.

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

class files are encoded, NOT encrypted

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

Java NIO basics:
---------------
NIO: New Input/Output
high-performance networking and file handling
API and structure which works as an alternative 10 API for Java
introduced from JDK 4
works as the second IO system after standard Java IO with some added advanced features

1) non-blocking IO operation: it reads the data whichever is ready
                ex.: a thread can ask a channel to read the data from a buffer and the thread can go for other work during that period and continue again from the previous point where it has left
                in the meantime, the reading operation is complete which increases the overall efficiency

          channel reads data into buffer
channel ----------------------------------> buffer

channel <------------------------------ buffer
           buffer writes into channel

2) selectors: for non-blocking I/O operations
              it is an object which monitors multiple channels for the events
              as Java NIO performs the non-blocking IO operations, selectors and the selection keys with selectable channels define the multiplexed IO operations
              that is, the selectors are used to select the channels which are ready for the I/O operation

              thread
                |
                |
             selector - selector handling multiple channels which are using the same thread
                |
      ---------------------
      |         |         |
   channel   channel   channel

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

why new?
-------
some things: missing in old package
old module:
1) provides limited support for --|
                                  |--> symbolic links
                                  |--> file attributes and performance issues
2) does not work consistently across all the platforms
3) missing with the basic operations like file copy, move, etc

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

collections:
-----------
framework: set of classes + interfaces with inbuilt functionalities that provide ready-made architecture
to implement a new feature or a class, no need to define a framework
however, an optimal object-oriented design always includes a framework with a collection of classes such that all the classes perform the same kind of task,
that is, it need not be user-defined, but it should exist and be used

before the Collection Framework (or before JDK 1.2) was introduced, the standard methods for grouping Java objects (or collections) were Arrays, or Vectors, or Hashtables

better to write: List<> = new ArrayList<>();
pointer of superclass, object of subclass

Collections Framework Hierarchy: <SEE PICTURE>
interfaces - green
classes - grey

roots: collection, map

set: elements can't be repeated

queue: ordered elements, and guiding how things will the added and removed
       follows FIFO

vector: dynamic table
        malloc, calloc --> realloc

key-value pair: map
if not, set: hash or normal

hashset: keys are unique
         keys can be taken from value itself or it can be assigned by user
         automatically calculated (???? controversial info????)

hashmap: keys assigned by user

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*




(LEC IS DONE, START WITH NEXT)
