composite: structural design pattern that composes objects into tree-like structures to represent part-whole hierarchies
           helps treat individual objects and object compositions uniformly

decorator: structural design pattern that allows behaviour to be added to individual objects dynamically, without affecting behaviour of other objects from same class
           creates a set of decorator classes - used to wrap concrete components

facade: provides a uniform interface in a subsystem
        defines a high level interface that makes subsystem easier to use

proxy: structural design pattern that provides a surrogate / placeholder for another object to control access to it
       useful to add an extra layer of control over access to an object
       acts as intermediary, controlling access to real object
example:
square {
  int side;
}
circle {
  int diameter;
}
squareAdapter extends square {
  int adaptSide() {
    return sqrt(2) * side;
  }
}

flyweight: structural design pattern that provides ways to decrease object count thus improving application required objects structure

command: structural design pattern that turns a request into a stand-alone object
         allows parametrization of clients with different requests

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

iterator: provides navigation without exposing object structure
          interface-based design pattern

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*
