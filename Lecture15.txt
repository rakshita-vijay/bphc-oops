design patterns (DPs): ????

DPs: not for college-level projects, meant for large-scale

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

subsets of design patterns in software development:
-------------------------------------------------
creational design patterns: make object creation more flexible anad efficient
                            makes system independent
· factory method
· abstract factory method
· builder method
· prototype method
· singleton method

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

structural design patterns: focus on classes / objects that form large, complex structures
                            help in organizing and managing relationships between objects
                            goal: greater flexibility, reusability, maintainability
· command method
· bridge method
· composite method
· decorator method
· facade method
· proxy methood
· flyweight method

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

behavioral design patterns: deal with communication and interaction between objects and classes
                            focus on how objects and classes collaborate and communicate to accomplish tasks
· command method
· iterator method
· mediator method
· memento method
· observer method
· state method
· strategy method
· template method
· visitor method
· null object method

things to keep in mind:
----------------------
frequency of uses - how mcuh computational power is it going to use?
budget
deployment platform - edge devices
how much functional, how much present - how much is shown to user? what is its practicality?

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

factory method design pattern (FMDP): type of creational design pattern
                                      provides an interface for creating objects in superclass
                                      allows subclasses to alter the type of objects that will be created
                                      encapulates object creation logic in a separate method, promotes loose coupling b/w creator and created

abstract FMDP: provides an interface for creating families of related or dependent objects without specifying their concrete classes
               way of organizing how you create groups of things that are related

less abstraction, more memory
more abstraction, more computational power

we want: less memory, less computational power

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

singleton design pattern: simplest DP
                          ensures a class has only one instance, provides a global point of access to it
                          instance must be axtensible by subclassing, should be able to use extended instance without modifying
                          uses: logging, driving objects, caching, thread pool, DB connections

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*
